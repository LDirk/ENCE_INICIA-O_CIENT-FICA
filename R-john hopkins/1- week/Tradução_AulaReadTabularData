Está lição irá falar sobre ler e escrever dados em R. Existem diferentes tipo de maneiras que você pode fazer isso e eu quero falar sobre algumas funções primárias que usamos para ler e escrever dados. Existem algumas funções principais que nos falaremos para ler em R. As duas primeiras são read.table and read.csv e essas são usadas para ler dados em tabelas e elas provavelmente são as duas funções mais usadas para ler dados em R. Essas funções leem arquivos de texto que contém dados que estão armazenados em linhas e colunas e retornam um data frame em R. A função readLines é usada para ler linhas de um arquivo de texto, isso pode ser  realmente qualquer tipo de arquivo, isso somente dá a você um texto em a, como um vetor de caracteres em R. A função source é importante para ler códigos em R, então se você tem um código em R, por exemplo funções ou qualquer coisa escrita é gravada em um arquivo a função source irá ler todo código em R.

A função dget é também para ler arquivos de código em R, mas  também para ler objetos R que tem sido analisado dentro dos arquivos de texto.Nós falaremos um pouco mais sobre isso mais tarde. As funções load e unserialize são para ler objetos binários dentro do R. 

Então, as funções análogas para escrever dados são write.table, writeLines, dump, dput, save e serialize e esse tipo de emparelhamento com leitura analogica. Então, a função read.table é a função mais comum para ler dados dentro do R. É importante que você saiba mais ou menos como os argumentos funcionam, o que os argumentos são e entender o que eles significam. O primeiro argumento é bastante óbvio, ele é o nome do arquivo ou o nome de uma conexão,  qual iremos falar um pouco mais tarde.Usualmente, você irá dar a este arquivo um nome, podendo ser um string e podendo ser um caminho de um certo arquivo em seu computador. O cabeçalho é uma indicação de bandeira lógica se a primeira linha é uma linha do cabeçalho, então se a primeira linha ,por exemplo, tiver todos os nomes das variáveis, portanto,isso não é realmente um pedaço de dados, isso é somente uma linha que possui labels nele. Então você quer contar para a função read.table que se a primeira linha contém as variáveis nomes ou não ou se a linha somente, imediatamente, contém dados.

O argumento sep significa separador. É uma string que indica como as colunas são separadas.Portanto, por exemplo se você tem um arquivo que é separado por vírgulas então tem como separador a vírgula. Talvez às vezes arquivos são separados por ponto e vírgula, por separadores ou por espaços. E então se você quer usar read.table você dirá qual é o separador. ColClasses é um vetor character cujo comprimento é o mesmo do número de colunas do data set. E o vetor character indica o que é a classe de cada coluna do data set .Então, por exemplo, se a primeira coluna é numérico, a segunda é lógica e a terceira é um factor, etc. E então a ColClasses é um vetor,  que não é requerida mas isso conta o read.table o que a class dos dados é em cada coluna. nrows é o número de linhas no dataset, isto não é requerido mas pode ser usado. Comment.char é o caracter string que indica o que são character de comentários, então o padrão por exemplo, é o símbolo de libra ou o # símbolo e qualquer coisa depois, qualquer coisa a direita do símbolo é ignorado. Então você pode especificar outros caracteres para serem comentarios, e as linhas do arquivo que começam com isso serão ignorada. Skip é o número de linhas a serem  puladas do início. Então ,às vezes, talvez haja algum informação do cabeçalho ou alguma região sem dados no início do arquivo e você deseja pular exatamente isso. E então você pode usar a função read.table para pular a primeira palavra, pular as 10 primeiras, as primeiras 100 e então somente começar a ler os dados depois disso. O último argumento é StringsAsFactors isto por padrão é true e a ideia é que a questão é se você quiser codificar variáveis caracteres como factors .Então por padrão, a qualquer momento nosso read.table encontra uma coluna de dados que parece variáveis de caracteres, ira chamar, irá assumir que o que você quer ler é uma variável factor. Então você pode definir strings como factor igual a false.
Então, para pequenos e médios data sets , os computadores ficam cada vez melhores todos os dias, a definição de pequeno e moderado é mais ou menos crescente.Mas voce pode usar read.table usualmente sem especificar qualquer outro argumento além do nome do arquivo.

Exemplo: data = read.table(“nome.txt”) 

O R automaticamente :
Pulará qualquer linha que comece com # 
descobrirá quantas linhas há
descobrirá qual é o tipo de variável de cada coluna.
(Contar esses argumentos para o R o torna mais eficiente, porém somente vale a pena para grandes data sets) 

A função read.csv é idêntica a read.table, exceto pelo padrão separador , para o read.csv é a subdivisão e para o read.table é o espaço
